#!/bin/bash

# Snag the root directory for the codebase.
CODEBASE_ROOT_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )/.." >/dev/null && pwd)"
SCRIPT_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd)"

# Where we want the virtual mount to exist for our code from the framework.
MOUNT_CODEBASE_DIR="/var/source"

# Our container we will reuse for any tests etc.
CONTAINER_NAME="${USER}_zynga_hacklang_framework"

# JEO: we need to run the runtime within an container as the outward executing user.
#GID=`id -g $UID`
# -u $UID:$GID \
#echo "uid=$UID"
#echo "gid=$GID"

#echo "containerName: ${CONTAINER_NAME}"
#echo "codebaseRoot: ${CODEBASE_ROOT_DIR} ${SCRIPT_DIR}"

DOES_EXIST="$(docker ps -a | grep ${CONTAINER_NAME})"
if [ "$DOES_EXIST" == "" ]; then
  echo "- creating docker container containerName=${CONTAINTER_NAME}"
  docker create \
    -it \
    -e ZYNGA_DOCKER=1 \
    -v "${CODEBASE_ROOT_DIR}:/var/source" \
    --name "${CONTAINER_NAME}" \
    -w "${MOUNT_CODEBASE_DIR}" \
    zerodiv/hhvm:latest
else
  echo "- container exists containerName=${CONTAINER_NAME}"
fi

##
# Create the container if it doesn't exist.
##
IS_RUNNING="$(docker ps -a | grep ${CONTAINER_NAME} | grep Up)"

if [ "$IS_RUNNING" == "" ]; then 
  echo "- starting docker container containerName=${CONTAINER_NAME}";
  docker start "${CONTAINER_NAME}" >/dev/null 2>/dev/null
else 
  echo "- container is running containerName=${CONTAINER_NAME}"
fi

# run the command within docker.
docker exec \
   -w "${MOUNT_CODEBASE_DIR}" \
   -it \
   "${CONTAINER_NAME}" \
   $@
